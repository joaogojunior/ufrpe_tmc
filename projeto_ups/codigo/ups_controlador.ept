(*
    until => executa o estado em que estÃ¡ e transiciona para outro estado
    unless => transiciona para outro estado e executa o novo estado
*)

node computador(c_atx, off_atx, ts, cr1, cr3, cr4, ba, b1, b3, b4, s_atx, s1, s3, s4:bool) returns (estado: int;)
var a, r1, r3, r4: bool;
let
a = (ba & s_atx) or not c_atx;
r1 = (b1 & s1) or not cr1;
r3 = (b3 & s3) or not cr3;
r4 = (b4 & s4) or not cr4;
    automaton
    state Off do
      estado = 0;
    unless a then Boot
    state Boot do
      estado = 1;
    unless off_atx then Off
      | ts then Rlevel1
    state Rlevel1 do
      estado = 2;
    unless a then Off
      | r3  then Rlevel3
      | r4  then Rlevel4
    state Rlevel3 do
      estado = 3;
    unless a then Off
      | r1 then Rlevel1
      | r4 then Rlevel4
    state Rlevel4 do
      estado = 4;
    unless a then Off
      | r1 then Rlevel1
      | r3 then Rlevel3
    end
tel

type bat_states =  BERR | B100 | B75 | B50 | B25 | BCHR
node bateria(ac, cp, l1, l2, v:bool) returns (estado_bat:bat_states)
var a, b, c, d, e: bool;
let
   a = not cp & l1 & l2 & v;
   b = cp & l1 & l2 & v;
   c = not cp & not l1 & l2 & v;
   d = not cp & not l1 & not l2 & v;
   e = not a & not b & not c & not d;
    automaton
    state Erro do
      estado_bat = BERR;
    unless ac then Carregando
      | b then Cheio
      | a then Limiar1
      | c then Limiar2
      | d then Baixo
    state Cheio do
      estado_bat = B100;
    unless ac then Carregando
      | a then Limiar1
      | e or c or d then Erro
    state Limiar1 do
      estado_bat = B75;
    unless ac then Carregando
      | b then Cheio
      | c then Limiar2
      | e or d then Erro
    state Limiar2 do
      estado_bat = B50;
    unless ac then Carregando
       | a then Limiar1
       | d then Baixo
       | e or b then Erro
    state Baixo do
      estado_bat = B25;
    unless ac then Carregando
       | c then Limiar2
       | e or a or b then Erro
    state Carregando do
      estado_bat = BCHR;
    unless not ac & b then Cheio
      | not ac & a then Limiar1
      | not ac & c then Limiar2
      | not ac & d then Baixo
    end
tel

node atuador_sw(ca:bool) returns (estado:bool)
let
    automaton
    state Des do
      estado = false;
    unless ca then Lig
    state Lig do
      estado = true;
    unless ca then Des
    end
tel

node periodo_dia(t:bool) returns (isday: bool)
let
    automaton
    state Dia do
      isday = true;
    unless t then Noite
    state Noite do
      isday = false;
    unless t then Dia
    end
tel

node modem_adsl(c, t, o :bool) returns (atuador: bool; estado:int)
let
    automaton
    state Off do
      estado = 0;
      atuador = false;
    unless c then Boot
    state Boot do
      estado = 2;
      atuador = true;
    unless c then Off
       | t then Teste
    state Teste do
       estado = 3;
       atuador = true;
     unless c then Off
       | not o then Sleep
       | o then Online
     state Online do
       estado = 4;
       atuador = true;
     unless c then Off
       | t then Teste
     state Sleep do
       estado = 1;
       atuador = false
     unless c then Off
       | t then Boot
    end
tel

node contrato( ac, cb, l1b, l2b, vb, td, tm, om, ts, swa, swr1, swr3, swr4: bool )
 returns ( erro,  dia, r_dia, r_noite, pabx_atuador, modem_atuador: bool;  modem_estado, serv_estado: int; bat12v: bat_states)
    contract

     enforce (r_dia or r_noite)
     with (cp, cm, ca, co,  cr1, cr3, cr4, ba, br1, br3, br4:bool)

let
(* planta *)
    pabx_atuador = inlined atuador_sw(cp);
    (modem_atuador, modem_estado) = inlined modem_adsl(cm, tm, om);
    serv_estado = inlined computador(ca, co, ts, cr1, cr3, cr4, ba, br1, br3, br4, swa, swr1, swr3, swr4);

    dia = inlined periodo_dia(td);
    bat12v = inlined bateria(ac, cb, l1b, l2b, vb);

     switch bat12v
     | BERR do
          erro = true;
          r_dia = dia & not pabx_atuador & not modem_atuador & ( serv_estado = 0 );
          r_noite = not dia & not pabx_atuador & not modem_atuador & ( serv_estado = 0 );
     | BCHR do
          erro = false;
          r_dia =  dia & pabx_atuador & (modem_estado > 0 ) & (serv_estado > 0 );   
          r_noite = not dia & pabx_atuador & (modem_estado > 0 ) & (serv_estado > 0);
     | B25 do
          erro = false;
          r_dia = dia & not pabx_atuador & not modem_atuador & ( serv_estado = 0 );
          r_noite = not dia & not pabx_atuador & not modem_atuador & ( serv_estado = 0 );
     | B50 do
          erro = false;
          r_dia =  dia & not pabx_atuador & (modem_estado > 0 ) & (serv_estado < 3) ;   
          r_noite = not dia & not pabx_atuador & (modem_estado > 0 ) & ( serv_estado = 0 );
     | B75 do
          erro = false;
          r_dia =  dia & pabx_atuador & (modem_estado > 0 ) & ( serv_estado > 0 & serv_estado < 4 );
          r_noite = not dia & not pabx_atuador & (modem_estado > 0 ) & ( serv_estado = 0 );
     | B100 do
          erro = false;
          r_dia =  dia & pabx_atuador & (modem_estado > 0 ) & (serv_estado > 0 );   
          r_noite = not dia & pabx_atuador & (modem_estado > 0 ) & (serv_estado > 0);
  end
tel
